<nav class="navbar bg-body-tertiary">
  <div class="container-fluid">
    <div class="left-section log">
      <img id="toggleButton" src="public\images\menu-30.png" alt="Toggle Header" style="cursor: pointer" />
      <i class="fa-solid fa-bolt"></i>
      <a class="bungee-spice-regular">Loopfiy</a>
    </div>

    <form id="searchForm" class="d-flex" role="search">
      <div class="search_container">
        <input id="searchInput" class="search_input" type="text" placeholder="Search" aria-label="Search" />
      </div>
      <button type="submit" class="search-btn">
        <img src="public/images/search-50.png" alt="Search Icon" />
      </button>
    </form>

    <div class="right-section"></div>
    <a href="/login" id="loginLink">
      <button class="login-btn" id="loginButton">
        <img src="public\images\user-50.png" alt="" id="profileImage" />
        <span id="buttonText">로그인</span>
      </button>
    </a>
  </div>
</nav>

<header class="LoopfiyBar" id="toggleHeader" style="display: none">
  <div class="sidebar-menu-btn-box">
    <button class="sidebar-menu-btn">
      <img src="public\images\home-50.png" alt="" />
      홈
    </button>

    <button class="sidebar-menu-btn" id="notificationBtn">
      <img src="public\images\reminder-50.png" alt="" />
      알림
    </button>

    <a href="/myChannel">
      <button class="sidebar-menu-btn">
        <img src="public\images\user-50.png" alt="" id="profileImage" />
        내 채널
      </button>
    </a>

    <a href="/create-channel">
      <button class="sidebar-menu-btn">
        <img src="public\images\user-50.png" alt="" />
        채널 만들기
      </button>
    </a>
  </div>

  <div class="sidebar-menu-btn-box logout-box">
    <button id="logoutBtn" class="sidebar-logout-btn">로그아웃</button>
  </div>
</header>

<script>


  document.getElementById('toggleButton').addEventListener('click', function () {

    const header = document.getElementById('toggleHeader');
    header.style.display = header.style.display === 'none' || header.style.display === '' ? 'block' : 'none';
  });


  const urlParams = new URLSearchParams(window.location.search);
  const token = localStorage.getItem('token') || urlParams.get('token');


  const loginButton = document.getElementById('loginButton');
  const loginLink = document.getElementById('loginLink');
  const buttonText = document.getElementById('buttonText');


  if (token) {
    buttonText.textContent = '내 계정';
    loginLink.href = '/reset-password';
  }


  const logoutBtn = document.getElementById('logoutBtn');
  logoutBtn.addEventListener('click', () => {
    localStorage.removeItem('token');
    alert('로그아웃 되었습니다.');
    window.location.href = '/';
  });


  const setImageSrc = (src) => {
    document.querySelectorAll('#profileImage').forEach((img) => (img.src = src));
  };


  if (urlParams.get('token') && !localStorage.getItem('token')) {
    localStorage.setItem('token', urlParams.get('token'));
    console.log('URL에서 토큰을 로컬 스토리지에 저장 완료:', urlParams.get('token'));
  }

  const DEFAULT_PROFILE_IMAGE = "public/images/user-50.png";

  if (!token) {
    setImageSrc(DEFAULT_PROFILE_IMAGE);
  } else {
    (async () => {
      try {
        const response = await fetch('/channel', {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error('프로필 정보를 가져오지 못했습니다.');
        }

        const profileData = await response.json();
        setImageSrc(profileData.profileImage || DEFAULT_PROFILE_IMAGE);
        const createChannelLink = document.querySelector('a[href="/create-channel"]');
        if (profileData.profileImage) {
          createChannelLink.style.display = 'none';

        }

      } catch (error) {
        console.error('오류:', error);
        setImageSrc(DEFAULT_PROFILE_IMAGE);
      }
    })();


  }

  function openNotificationPopup() {
    const popup = document.getElementById('notificationPopup');
    popup.style.display = 'block';

    const notificationList = document.getElementById('notificationList');
    notificationList.innerHTML = '';

    const combinedNotifications = [...storedNotifications];

    combinedNotifications
      .sort((a, b) => b.id - a.id)
      .forEach((notification) => {
        const item = document.createElement('div');
        item.className = 'notification-item';
        item.textContent = notification.message;
        item.dataset.id = notification.id;
        item.addEventListener('click', () => handleNotificationSwipe(item));
        notificationList.appendChild(item);
      });

    storedNotifications = combinedNotifications;
  }

  function closeNotificationPopup() {
    const popup = document.getElementById('notificationPopup');
    popup.style.display = 'none';
  }

  async function handleNotificationSwipe(item) {
    const id = parseInt(item.dataset.id, 10);

    const response = await fetch(`/notifications/${id}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
    });

    if (!response.ok) {
      ('삭제 실패!');
    }

    storedNotifications = storedNotifications.filter((notification) => notification.id !== id);
    localStorage.setItem('pastNotifications', JSON.stringify(storedNotifications));

    item.remove();

    console.log(`알림 ${id} 제거 완료`);
  }

  document.getElementById('notificationBtn').addEventListener('click', () => {
    openNotificationPopup();
  });


</script>