<!doctype html>
<html lang="kr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>File Upload</title>
    <style>
      /* 기본 스타일 */
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        background: linear-gradient(135deg, #1e1e1e, #000000); /* 그라디언트 배경 */
        display: flex;
        justify-content: center;
        align-items: center;
        color: #fff;
      }

      /* 컨테이너 스타일 */
      form {
        background: #020202; /* 폼 배경색 */
        padding: 30px;
        border-radius: 10px;
        width: 100%;
        max-width: 500px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
      }

      h2 {
        font-size: 1.8rem;
        text-align: center;
        margin-bottom: 20px;
        color: #f5f5f5;
      }

      /* 입력 폼 스타일 */
      form div {
        margin-bottom: 20px;
      }

      label {
        font-size: 1rem;
        margin-bottom: 8px;
        display: block;
        color: #cfcfcf;
      }

      input[type='text'],
      input[type='file'],
      textarea {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #555;
        border-radius: 5px;
        background-color: #3a3a3a;
        color: #fff;
        box-sizing: border-box;
      }

      textarea {
        height: 100px; /* 텍스트 영역 높이 */
        resize: vertical; /* 크기 조정 가능 */
      }

      input[type='file'] {
        padding: 5px;
        font-size: 0.9rem;
        border: none;
      }

      input:focus,
      textarea:focus {
        outline: none;
        border-color: #56baed; /* 포커스 시 테두리 색상 */
      }

      /* 버튼 스타일 */
      button {
        width: 100%;
        padding: 12px;
        font-size: 1.2rem;
        font-weight: bold;
        color: #fff;
        background: #56baed; /* 버튼 배경색 */
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition:
          background-color 0.3s ease,
          transform 0.2s ease;
      }

      button:hover {
        background: #4094d0;
        transform: scale(1.05); /* 살짝 확대 효과 */
      }

      /* 반응형 디자인 */
      @media (max-width: 480px) {
        form {
          padding: 20px;
          width: 90%;
        }

        h2 {
          font-size: 1.5rem;
        }

        input[type='text'],
        textarea {
          font-size: 0.9rem;
        }

        button {
          font-size: 1rem;
          padding: 10px;
        }
      }
    </style>
  </head>

  <body>
    <input type="file" id="fileInput" />
    <button id="uploadBtn">Generate URL & Upload</button>

    <form>
      <div>
        <label for="title">영상 제목</label>
        <input type="text" id="title" placeholder="영상 제목을 입력하세요." />
      </div>

      <div>
        <label for="title">영상 설명</label>
        <textarea id="video-description" placeholder="영상 설명을 입력하세요"></textarea>
      </div>

      <div>
        <label for="title">해시 태그</label>
        <input type="text" id="hashtags" placeholder="해시태그를 입력하세요." />
      </div>

      <div>
        <label for="title">공개 여부</label>
        <input type="text" id="visibility" placeholder="공개 여부를 입력하세요" />
      </div>

      <div>
        <label for="title">썸네일 url</label>
        <input type="text" id="thumbnailUrl" placeholder="썸네일 url 을 입력하세요." />
      </div>
    </form>

    <script>
      const uploadBtn = document.getElementById('uploadBtn');
      const fileInput = document.getElementById('fileInput');
      const titleInput = document.getElementById('title');
      const descriptionInput = document.getElementById('video-description');
      const hashtagsInput = document.getElementById('hashtags');
      const visibilityInput = document.getElementById('visibility');
      const thumbnailUrlInput = document.getElementById('thumbnailUrl');
      const token = localStorage.getItem('token');

      // 페이지가 로드될 때 저장된 값을 복원
      window.addEventListener('load', () => {
        const savedVisibility = localStorage.getItem('visibility');
        if (savedVisibility) {
          visibilityInput.value = savedVisibility;
        }
      });

      // 입력값이 변경될 때 localStorage에 저장
      visibilityInput.addEventListener('input', () => {
        localStorage.setItem('visibility', visibilityInput.value);
      });

      uploadBtn.addEventListener('click', async () => {
        const file = fileInput.files[0];
        if (!file) {
          alert('파일을 선택해주세요.');
          return;
        }

        try {
          const payload = {
            fileType: file.type,
            fileSize: file.size,
            bucket: '15-final-project',
            region: 'ap-northeast-2',
          };

          const response = await fetch('http://localhost:3000/s3/generate-url', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
            body: JSON.stringify(payload),
          });

          if (!response.ok) throw new Error('Pre-signed URL 요청 실패');

          const { presignedUrl, key } = await response.json();
          console.log(presignedUrl, key);

          const metadataPayload = {
            title: titleInput.value || null,
            description: descriptionInput.value || null,
            thumbnailUrl: thumbnailUrlInput.value || null,
            hashtags: hashtagsInput.value ? hashtagsInput.value.split(',') : [],
            visibility: visibilityInput.value || null,
            videoCode: key,
          };

          const uploadResponse = await fetch(presignedUrl, {
            method: 'PUT',
            body: file,
            headers: {
              'Content-Type': file.type,
            },
          });

          if (uploadResponse.ok) {
            alert('파일 업로드 성공!');

            const metadataResponse = await fetch('http://localhost:3000/video', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify(metadataPayload),
            });

            if (!metadataResponse.ok) {
              throw new Error('메타데이터 전송 실패');
            }

            console.log('메타데이터 전송 성공');
          } else {
            throw new Error('파일 업로드 실패');
          }
        } catch (error) {
          alert(`업로드 중 오류 발생: ${error.message}`);
        }
      });
    </script>
  </body>
</html>
