<!doctype html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>NestJS 채팅</title>
    <link rel="stylesheet" href="/public/styles/chat.css" />
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <div class="chat">
      <div class="chat-header">
        <span>NestJS 채팅</span>
        <button id="logoutButton" class="button">로그아웃</button>
      </div>
      <div class="chat-message-list" id="chatMessageList">
        <div class="chat-message">
          <div class="chat-message-wrapper">
            <span class="chat-message-author">Bot</span>
            <div class="chat-message-bubble">
              <span class="chat-message-body">NestJS 채팅 앱에 오신 것을 환영합니다</span>
            </div>
          </div>
        </div>
      </div>
      <div class="chat-composer">
        <input
          id="chatComposerInput"
          class="chat-composer-input"
          placeholder="메시지를 입력하세요"
        />
      </div>
    </div>

    <script>
      const socket = io('http://localhost:3000');

      const chatMessageList = document.getElementById('chatMessageList');
      const chatComposerInput = document.getElementById('chatComposerInput');
      const logoutButton = document.getElementById('logoutButton');

      socket.on('connect', () => {
        console.log('WebSocket 서버에 연결됨');
      });

      socket.on('disconnect', () => {
        console.log('WebSocket 서버에서 연결 해제됨');
      });

      socket.on('chat', (message) => {
        console.log('새 메시지 수신:', message);
        addMessageToChat(message);
      });

      chatComposerInput.addEventListener('keyup', (e) => {
        if (e.key === 'Enter' && chatComposerInput.value.trim() !== '') {
          e.preventDefault(); // 기본 동작 방지
          const message = {
            author: 'you',
            body: chatComposerInput.value.trim(),
          };
          socket.emit('chat', message);
          chatComposerInput.value = '';
        }
      });

      logoutButton.addEventListener('click', () => {
        socket.disconnect();
        window.location.href = '/logout';
      });

      function addMessageToChat(message) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('chat-message');
        messageElement.innerHTML = `
          <div class="chat-message-wrapper">
            <span class="chat-message-author">${message.author}</span>
            <div class="chat-message-bubble">
              <span class="chat-message-body">${message.body}</span>
            </div>
          </div>
        `;
        chatMessageList.appendChild(messageElement);
      }
    </script>
  </body>
</html>
