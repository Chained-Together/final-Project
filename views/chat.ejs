<!doctype html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>채팅방</title>
    <style>
      #chat-box {
        border: 1px solid #ccc;
        height: 300px;
        overflow-y: scroll;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #fff;
        color: #000;
      }
      .message {
        margin: 5px 0;
        padding: 5px;
        border-radius: 5px;
        background-color: #f0f0f0;
      }
      #message-input {
        width: 80%;
        padding: 5px;
        margin-right: 5px;
      }
      #send-button {
        padding: 5px 15px;
      }
    </style>
  </head>
  <body>
    <h1>귀여운 15조의 채팅방</h1>
    <div id="chat-box"></div>
    <div>
      <input type="text" id="message-input" placeholder="메시지를 입력하세요" />
      <button id="send-button">전송</button>
    </div>

    <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
    <script>
      // feature 브랜치의 인증 및 사용자 식별 방식 적용
      const jwtToken = localStorage.getItem('token');
      let nickname = null;

      if (jwtToken) {
        const decoded = JSON.parse(atob(jwtToken.split('.')[1]));
        nickname = decoded.nickname;
      } else {
        nickname = localStorage.getItem('nickname');
        if (!nickname) {
          nickname = generateRandomUsername();
          localStorage.setItem('nickname', nickname);
        }
      }

      const urlParams = new URLSearchParams(window.location.search);
      const roomId = urlParams.get('roomId') || '<%= roomId %>';

      // 새로운 인증 방식 적용
      const socket = io('http://localhost:3001', {
        auth: {
          token: jwtToken || null,
        },
      });

      // 이하 기존 HEAD의 메시지 처리 로직 유지
      socket.on('connect', () => {
        console.log(`Connected to server with ID: ${socket.id}`);
        socket.emit('joinRoom', { roomId, nickname });
      });

      socket.on('receiveMessage', (data) => {
        const chatBox = document.getElementById('chat-box');
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.textContent = `${data.sender}: ${data.message}`;
        chatBox.appendChild(messageElement);
        chatBox.scrollTop = chatBox.scrollHeight;
      });

      // 메시지 전송 버튼 클릭 이벤트
      document.getElementById('send-button').addEventListener('click', () => {
        const messageInput = document.getElementById('message-input');
        const message = messageInput.value.trim();

        if (!jwtToken) {
          messageInput.value = '';
          messageInput.placeholder = '로그인 후 채팅이 가능합니다';
          return;
        }

        if (message) {
          socket.emit('sendMessage', { roomId, message, sender: nickname });
          messageInput.value = '';
          messageInput.placeholder = '메시지를 입력하세요';
        }
      });

      // 엔터키 이벤트도 동일하게 처리
      document.getElementById('message-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          document.getElementById('send-button').click();
        }
      });

      // 랜덤 사용자 이름 생성 함수 추가
      function generateRandomUsername() {
        const adjectives = ['Quick', 'Clever', 'Bright', 'Happy', 'Cool'];
        const animals = ['Fox', 'Rabbit', 'Eagle', 'Tiger', 'Bear'];
        const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
        const randomAnimal = animals[Math.floor(Math.random() * animals.length)];
        return `${randomAdjective}${randomAnimal}${Math.floor(Math.random() * 1000)}`;
      }
    </script>
  </body>
</html>
