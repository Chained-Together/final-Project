<!doctype html>
<html lang="kr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>회원가입</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #1e2025, #4c5c68);
        color: #ffffff;
      }

      h2 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #ffffff;
        margin-bottom: 20px;
        text-align: center;
        text-transform: uppercase;
        letter-spacing: 1.5px;
      }

      #signupPopup {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(12px);
        border-radius: 20px;
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4);
        padding: 40px;
        width: 400px;
        transition:
          transform 0.3s ease,
          box-shadow 0.3s ease;
      }

      #signupPopup:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
      }

      form {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }

      label {
        font-size: 1rem;
        font-weight: bold;
        color: #e0e0e0;
        margin-bottom: 5px;
      }

      input[type='text'],
      input[type='password'] {
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        background: rgba(255, 255, 255, 0.2);
        color: #ffffff;
        box-sizing: border-box;
        transition:
          background 0.3s ease,
          box-shadow 0.3s ease;
      }

      input[type='text']:focus,
      input[type='password']:focus {
        background: rgba(255, 255, 255, 0.3);
        outline: none;
        box-shadow: 0 4px 10px rgba(255, 255, 255, 0.5);
      }

      input::placeholder {
        color: rgba(255, 255, 255, 0.6);
      }

      #submitBtn {
        width: 100%;
        padding: 15px;
        font-size: 1.3rem;
        font-weight: bold;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        background: linear-gradient(90deg, #ff7e5f, #feb47b);
        color: #ffffff;
        text-transform: uppercase;
        transition: transform 0.3s ease;
      }

      #submitBtn:hover {
        transform: scale(1.05);
        background: linear-gradient(90deg, #feb47b, #ff7e5f);
        box-shadow: 0 4px 15px rgba(255, 126, 95, 0.7);
      }

      @media (max-width: 480px) {
        #signupPopup {
          width: 90%;
          padding: 30px;
        }

        h2 {
          font-size: 2rem;
        }

        input[type='text'],
        input[type='password'] {
          padding: 10px;
          font-size: 1rem;
        }

        #submitBtn {
          padding: 12px;
          font-size: 1rem;
        }
      }
    </style>
  </head>

  <body>
    <div id="signupPopup">
      <h2>회원가입</h2>
      <form id="signupForm" action="/auth/signup" method="POST">
        <div>
          <label for="email">이메일:</label>
          <input type="text" id="email" name="email" placeholder="이메일을 입력하세요" required />
          <span class="error-message"></span>
        </div>
        <div>
          <label for="password">비밀번호:</label>
          <input
            type="password"
            id="password"
            name="password"
            placeholder="비밀번호를 입력하세요"
            required
          />
          <span class="error-message"></span>
        </div>
        <div>
          <label for="confirmedPassword">비밀번호 확인:</label>
          <input
            type="password"
            id="confirmedPassword"
            name="confirmedPassword"
            placeholder="비밀번호를 다시 입력하세요"
            required
          />
          <span class="error-message"></span>
        </div>
        <div>
          <label for="name">이름:</label>
          <input type="text" id="name" name="name" placeholder="이름을 입력하세요" required />
          <span class="error-message"></span>
        </div>
        <div>
          <label for="nickname">닉네임:</label>
          <input
            type="text"
            id="nickname"
            name="nickname"
            placeholder="닉네임을 입력하세요"
            required
          />
          <span class="error-message"></span>
        </div>
        <div>
          <label for="phoneNumber">전화번호:</label>
          <input
            type="text"
            id="phoneNumber"
            name="phoneNumber"
            placeholder="전화번호를 입력하세요"
            required
          />
          <span class="error-message"></span>
        </div>
        <button type="submit" id="submitBtn">가입하기</button>
      </form>
    </div>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const signupForm = document.getElementById('signupForm');

        // 유효성 검사 함수
        function validateField(input, regex, errorMessage) {
          const value = input.value.trim();
          const errorElement = input.nextElementSibling;
          if (!regex.test(value)) {
            errorElement.textContent = errorMessage;
            input.classList.add('error');
            return false;
          }
          errorElement.textContent = '';
          input.classList.remove('error');
          return true;
        }

        // 필드 별 유효성 검사 설정
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const confirmedPasswordInput = document.getElementById('confirmedPassword');
        const phoneNumberInput = document.getElementById('phoneNumber');

        emailInput.addEventListener('blur', () => {
          validateField(emailInput, /^[^\s@]+@[^\s@]+\.[^\s@]+$/, '유효한 이메일을 입력하세요.');
        });

        passwordInput.addEventListener('blur', () => {
          validateField(
            passwordInput,
            /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
            '비밀번호는 최소 8자이며, 문자와 숫자를 포함해야 합니다.',
          );
        });

        confirmedPasswordInput.addEventListener('blur', () => {
          const errorElement = confirmedPasswordInput.nextElementSibling;
          if (confirmedPasswordInput.value !== passwordInput.value) {
            errorElement.textContent = '비밀번호가 일치하지 않습니다.';
            confirmedPasswordInput.classList.add('error');
          } else {
            errorElement.textContent = '';
            confirmedPasswordInput.classList.remove('error');
          }
        });

        phoneNumberInput.addEventListener('blur', () => {
          validateField(phoneNumberInput, /^\d{10,11}$/, '전화번호는 10-11자리 숫자여야 합니다.');
        });

        // 폼 제출 이벤트 핸들러
        signupForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          // 유효성 검사
          const isEmailValid = validateField(
            emailInput,
            /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            '유효한 이메일을 입력하세요.',
          );
          const isPasswordValid = validateField(
            passwordInput,
            /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
            '비밀번호는 최소 8자이며, 문자와 숫자를 포함해야 합니다.',
          );
          const isConfirmedPasswordValid =
            confirmedPasswordInput.value.trim() === passwordInput.value.trim();
          const isPhoneNumberValid = validateField(
            phoneNumberInput,
            /^\d{10,11}$/,
            '전화번호는 10-11자리 숫자여야 합니다.',
          );

          if (
            !isEmailValid ||
            !isPasswordValid ||
            !isConfirmedPasswordValid ||
            !isPhoneNumberValid
          ) {
            alert('모든 필드를 올바르게 입력하세요.');
            return;
          }

          try {
            // 서버 요청
            const response = await fetch('/auth/signup', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                email: emailInput.value.trim(),
                password: passwordInput.value.trim(),
                confirmedPassword: confirmedPasswordInput.value.trim(),
                name: document.getElementById('name').value.trim(),
                nickname: document.getElementById('nickname').value.trim(),
                phoneNumber: phoneNumberInput.value.trim(),
              }),
            });

            if (!response.ok) {
              const errorData = await response.json();
              const errorMessage = errorData.message || '회원가입에 실패했습니다.';
              alert(`오류: ${errorMessage}`);
              return;
            }

            alert('회원가입이 성공적으로 완료되었습니다!');
            window.location.href = '/login';
          } catch (err) {
            alert('서버와 통신 중 오류가 발생했습니다.');
          }
        });
      });
    </script>
  </body>
</html>
