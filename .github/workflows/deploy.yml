name: Deploy to AWS ECR

on:
  push:
    branches:
      - deploy  # deploy 브랜치에 Push될 때 실행

env:
  AWS_REGION: ${{ secrets.KSR_AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.KSR_AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.KSR_AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.KSR_ECR_REPOSITORY_NAME }}
  AWS_ACCOUNT_ID: ${{ secrets.KSR_AWS_ACCOUNT_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # 필요 시 버전을 변경하세요

      # 3. npm으로 종속성 설치
      - name: Install dependencies
        run: npm install

      # 4. Jest 테스트 실행
      - name: Run Tests
        run: npm test

      # 5. ECR 로그인하기
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # 6. Docker 이미지 빌드하기
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }} .

      # 7. 도커이미지 태크 만들기
      - name: Tag Docker Image
        run: |
          DOCKER_IMAGE_ID=$(docker images -q ${{ env.ECR_REPOSITORY }}:latest)
          docker tag $DOCKER_IMAGE_ID ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      # 8. AWS ECR에 Docker Image Push
      - name: Push Docker Image
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
