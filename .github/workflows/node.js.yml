name: CI/CD Pipeline

on:
  push:
    branches: ['dev']
  pull_request:
    branches: ['dev']

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - run: npm ci
      - run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.EB_AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.EB_AWS_SECRET_ACCESS_KEY }}
          application_name: loopfiy
          environment_name: Loopfiy-env-1
          version_label: ${{ github.run_number }}-${{ github.sha }}
          region: ap-northeast-2
          deployment_package: deploy.zip

  # build-and-push:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: AWS IAM 사용자 설정
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login To Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Build and push Docker image to Amazon ECR
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  #         IMAGE_TAG: ${{ github.sha }}
# 이건 예비용(CD까지 되어있음)
# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main  # main 브랜치로 푸시될 때 실행
#     branches-ignore:
#       - dev

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       # 1. GitHub Repository Checkout
#       - uses: actions/checkout@v4

#       # 2. Node.js 설치 및 테스트 실행
#       - name: Use Node.js 20.x
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20.x
#           cache: npm
#       - run: npm ci
#       - run: npm test

#   build-and-push:
#     needs: test
#     runs-on: ubuntu-latest

#     steps:
#       # 1. GitHub Repository Checkout
#       - uses: actions/checkout@v4

#       # 2. AWS Credentials 설정
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       # 3. Amazon ECR 로그인
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       # 4. Docker 이미지 빌드 및 푸시
#       - name: Build and Push Docker Image to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest

#     steps:
#       # 1. AWS Credentials 설정
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       # 2. ECS 서비스 업데이트
#       - name: Deploy to Amazon ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           aws-region: ${{ secrets.AWS_REGION }}
#           cluster: ${{ secrets.ECS_CLUSTER_NAME }}
#           service: ${{ secrets.ECS_SERVICE_NAME }}
#           image: ${{ steps.build-and-push.outputs.IMAGE_URI }}
